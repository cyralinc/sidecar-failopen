Description: Cyral Sidecar Fail Open
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Sidecar information
        Parameters:
          - SidecarHost
          - SidecarPort
      - Label:
          default: Repository Configuration
        Parameters:
          - RepoType
          - RepoSecretArn
          - RepoUsername
          - RepoPassword
          - RepoHost
          - RepoPort
          - RepoDatabase
      - Label:
          default: Record set configuration
        Parameters:
          - HostedZoneID
          - RecordSetName
          - RepoRecordSetType
      - Label:
          default:  Lambda configuration
        Parameters:
          - Version
          - FailOpenCodeS3Bucket
          - FailOpenCodeS3Key
          - NumberOfRetries
          - LogLevel
      - Label:
          default: PostgreSQL based repositories specific configurations
        Parameters:
          - PostgreSQLConnectionOpts
      - Label:
          default: Networking and Lambda configuration
        Parameters:
          - VPC
          - Subnets
      - Label:
          default: Trigger configuration
        Parameters:
          - ConsecutiveFailuresForTrigger
          - ScheduleExpression

Parameters:
  SidecarHost:
    Type: String
    Description: "Domain name of the sidecar load balancer."
  SidecarPort:
    Type: String
    Description: "Port allocated on the sidecar for this repository."

  RepoType:
    Type: String
    Description: "The type of the repository that the health check will connect to."
    AllowedValues: [denodo, mariadb, mysql, oracle, postgresql, redshift]
  RepoSecretArn:
    Type: String
    Description: "Name of the entry in AWS Secrets Manager that stores the secret containing the repository credentials."
  RepoUsername:
    Type: String
    Description: "The username that the health check will use to connect to the repository."
    NoEcho: True
  RepoPassword:
    Type: String
    Description: "The corresponding password for the username that the health check will use to connect to the repository."
    NoEcho: True
  RepoHost:
    Type: String
    Description: "CNAME or IP address used to access the repository."
  RepoPort:
    Type: String
    Description: "The port that the repository is listening on."
    AllowedPattern: "\\d+"
  RepoDatabase:
    Type: String
    Description: "The database on the repository that the health check will connect to."

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: "The VPC the lambda will be attached to."
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: |
      The subnets the lambda will be deployed to. All subnets must be able to reach both the sidecar and the repository.
      These subnets must also support communication with CloudWatch and Secrets Manager.

  Version:
    Type: String
    Default: v0.3.1
  FailOpenCodeS3Bucket:
    Type: String
    Description: "S3 bucket that contains the Fail Open Lambda deployment package. LEAVE EMPTY UNLESS YOU WANT TO OVERRIDE THE DEFAULT."
  FailOpenCodeS3Key:
    Type: String
    Description: "Object key for the Lambda deployment package on the S3 bucket. LEAVE EMPTY UNLESS YOU WANT TO OVERRIDE THE DEFAULT."
  NumberOfRetries:
    Type: String
    Default: "3"
    Description: "Number of failed consecutive health check attempts before the lambda sets the metric as unhealthy."
    AllowedPattern: "\\d+"
  LogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARNING, ERROR, FATAL]
    Default: INFO
    Description: Level of the logging of the lambda function.

  PostgreSQLConnectionOpts:
    Type: String
    AllowedPattern: "([^=,]+=[^=,]*(,[^=,]+=[^=,]*)*){0,1}"
    Description: Connection string options for PostgreSQL based repositories (denodo, redshift, postgresql). Leave empty if not PostgreSQL based.

  HostedZoneID:
    Type: AWS::Route53::HostedZone::Id
    Description: "Hosted zone where the failover record sets will be created."
  RecordSetName:
    Type: String
    Description: "Name of the record sets that will reference the repository and sidecar."
  RepoRecordSetType:
    Type: String
    AllowedValues: [CNAME, A, AAAA]
    Default: CNAME
    Description: |
      Type of the record set for the repository informed in 'RepoHost'. If a domain name was provided, then
      choose 'CNAME', if IPv4 choose 'A' and if IPv6 choose 'AAAA'.
  TTL:
    Type: String
    AllowedPattern: "\\d+"
    Default: "60"
    Description: "Time-to-live for the record set."
  ConsecutiveFailuresForTrigger:
    Type: String
    Description: "Number of consecutive failures that will trigger the alarm state that will perform the fail open"
    Default: "2"
  ScheduleExpression:
    Description: "Schedule expression to invoke the health check. Default is rate(1 minute)."
    Type: String
    Default: "rate(1 minute)"
    AllowedPattern: '^cron\(([^ ]+ ){5}[^ ]+\)|rate\([^ ]+ [^ ]+\)$'

Conditions:
  CreateRepoSecret: !And
    - !Equals [!Ref RepoSecretArn, ""]
    - !Not [!Equals [!Ref RepoUsername, ""]]
    - !Not [!Equals [!Ref RepoPassword, ""]]
  UseDefaultCodeS3Bucket: !Equals [!Ref FailOpenCodeS3Bucket, ""]
  UseDefaultCodeS3Key: !Equals [!Ref FailOpenCodeS3Key, ""]

Resources:
  RepoSecret:
    Condition: CreateRepoSecret
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: username and password for the repository
      Name: !Sub '/${AWS::StackName}/RepoSecret'
      SecretString: !Sub
        - '{"username":"${username}","password":"${password}"}'
        - username: !Join ['\\"', !Split ['"', !Ref RepoUsername]]
          password: !Join ['\\"', !Split ['"', !Ref RepoPassword]]
      Tags:
        - Key: 'Stack'
          Value: !Ref 'AWS::StackName'
  PrimaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Failover: PRIMARY
      HealthCheckId: !Ref Route53HealthCheck
      HostedZoneId: !Ref HostedZoneID
      ResourceRecords:
        - !Ref SidecarHost
      Name: !Ref RecordSetName
      TTL: !Ref TTL
      SetIdentifier: "sidecar"

  SecondaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: !Ref RepoRecordSetType
      Failover: SECONDARY
      HostedZoneId: !Ref HostedZoneID
      ResourceRecords:
        - !Ref RepoHost
      Name: !Ref RecordSetName
      TTL: !Ref TTL
      SetIdentifier: "database"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !If [CreateRepoSecret, !Ref RepoSecret, !Ref RepoSecretArn]

              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !If [UseDefaultCodeS3Bucket, !Sub 'cyral-public-assets-${AWS::Region}', !Ref FailOpenCodeS3Bucket]
        # This is populated in at build time
        S3Key: !If [UseDefaultCodeS3Key, !Sub 'fail-open/${Version}/fail-open-lambda.zip', !Ref FailOpenCodeS3Key]
      Environment:
        Variables:
          FAIL_OPEN_SIDECAR_PORT: !Ref SidecarPort
          FAIL_OPEN_SIDECAR_HOST: !Ref SidecarHost
          FAIL_OPEN_CF_STACK_NAME: !Ref AWS::StackName
          FAIL_OPEN_REPO_TYPE: !Ref RepoType
          FAIL_OPEN_REPO_SECRET: !If [CreateRepoSecret, !Ref RepoSecret, !Ref RepoSecretArn]
          FAIL_OPEN_REPO_PORT: !Ref RepoPort
          FAIL_OPEN_REPO_DATABASE: !Ref RepoDatabase
          FAIL_OPEN_REPO_HOST: !Ref RepoHost
          FAIL_OPEN_N_RETRIES: !Sub "${NumberOfRetries}"
          FAIL_OPEN_LOG_LEVEL: !Ref LogLevel

          FAIL_OPEN_PG_CONN_OPTS: !Ref PostgreSQLConnectionOpts
          # adding oracle client path so that oracle client works
          LD_LIBRARY_PATH: 'oracle-client_21_4'

      FunctionName: !Ref AWS::StackName
      Timeout: "10"
      PackageType: Zip
      Runtime: go1.x
      Handler: failopen
      Role:
        !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref Subnets

  Events:
    Type: AWS::Events::Rule
    Properties:
      Description: Route53 Health Check
      Name: !Ref AWS::StackName
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: EVENTS
          Arn: !GetAtt LambdaFunction.Arn

  EventPermission:
    DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AWS::StackName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Events.Arn

  Route53CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alarm for Cyral Sidecar located at ${SidecarHost}, connecting to repo of ${RepoType} type"
      AlarmName: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
      MetricName: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName} (Health Check for resource ${SidecarHost})'
      Namespace: "CyralSidecarHealthChecks"
      ComparisonOperator: LessThanThreshold
      DatapointsToAlarm: !Ref ConsecutiveFailuresForTrigger
      EvaluationPeriods: !Ref ConsecutiveFailuresForTrigger
      Period: 60
      Statistic: "Minimum"
      Threshold: 1
      Dimensions:
        - Name: !Sub ${SidecarHost} ${RepoType} ${RepoHost} Health Check
          Value: !Sub ${SidecarHost} ${RepoType} ${RepoHost} Health Check
      TreatMissingData: "breaching"

  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    DependsOn: Route53CloudWatchAlarm
    Properties:
      HealthCheckConfig:
        AlarmIdentifier:
          Name: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
          Region: !Ref AWS::Region
        InsufficientDataHealthStatus: Unhealthy
        Type: CLOUDWATCH_METRIC
      HealthCheckTags:
        - Key: Name
          Value: !Ref AWS::StackName
