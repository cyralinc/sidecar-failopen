Description: Cyral Sidecar Fail Open
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Sidecar information
        Parameters:
          - SidecarHost
          - SidecarPort
      - Label:
          default: Repository Configuration
        Parameters:
          - RepoType
          - RepoSecretArn
          - RepoUsername
          - RepoPassword
          - RepoHost
          - RepoPort
          - RepoDatabase
          - ConnectionStringOptions
      - Label:
          default: Record set configuration
        Parameters:
          - HostedZoneID
          - RecordSetName
          - RepoRecordSetType
      - Label:
          default:  Lambda configuration
        Parameters:
          - Version
          - FailOpenCodeS3Bucket
          - FailOpenCodeS3Key
          - NumberOfRetries
          - LogLevel
      - Label:
          default: Snowflake specific configurations
        Parameters:
          - SnowflakeRole
          - SnowflakeAccount
          - SnowflakeWarehouse
      - Label:
          default: Snowflake NGINX proxy configuration (leave empty if not configuring a snowflake repository)
        Parameters:
          - SnowflakeNGINXProxyAsgMax
          - SnowflakeNGINXProxyAsgMin
          - SnowflakeNGINXProxyAsgDesired
          - SnowflakeNGINXProxySubnets
          - SnowflakeNGINXProxySSHKeyName
          - SnowflakeNGINXProxyInstanceType
          - SnowflakeNGINXProxyInstanceSecurityGroup
          - SnowflakeNGINXProxyLoadBalancerScheme
          - SnowflakeNGINXProxyAmiId
          - SnowflakeNGINXProxyEnableCrossZoneLoadBalancing
          - SidecarNamePrefix

Parameters:
  SidecarHost:
    Type: String
    Description: "Domain name of the sidecar load balancer."
  SidecarPort:
    Type: String
    Description: "Port allocated on the sidecar for this repository."

  RepoType:
    Type: String
    Description: "The type of the repository that the health check will connect to."
    AllowedValues: [denodo, mariadb, mongodb, mysql, oracle, postgresql, redshift, snowflake, sqlserver]
  RepoSecretArn:
    Type: String
    Description: "Name of the entry in AWS Secrets Manager that stores the secret containing the repository credentials."
  RepoUsername:
    Type: String
    Description: "The username that the health check will use to connect to the repository."
    NoEcho: True
  RepoPassword:
    Type: String
    Description: "The corresponding password for the username that the health check will use to connect to the repository."
    NoEcho: True
  RepoHost:
    Type: String
    Description: "CNAME or IP address used to access the repository."
  RepoPort:
    Type: String
    Description: "The port that the repository is listening on."
    AllowedPattern: "\\d+"
  RepoDatabase:
    Type: String
    Description: "The database on the repository that the health check will connect to."

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: "The VPC the lambda will be attached to."
  LambdaSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: |
      The subnets the lambda will be deployed to. All subnets must be able to reach both the sidecar and the repository.
      These subnets must also support communication with CloudWatch and Secrets Manager.

  Version:
    Type: String
    Default: v0.3.1
  FailOpenCodeS3Bucket:
    Type: String
    Description: "S3 bucket that contains the Fail Open Lambda deployment package. LEAVE EMPTY UNLESS YOU WANT TO OVERRIDE THE DEFAULT."
  FailOpenCodeS3Key:
    Type: String
    Description: "Object key for the Lambda deployment package on the S3 bucket. LEAVE EMPTY UNLESS YOU WANT TO OVERRIDE THE DEFAULT."
  NumberOfRetries:
    Type: String
    Default: "3"
    Description: "Number of failed consecutive health check attempts before the lambda sets the metric as unhealthy."
    AllowedPattern: "\\d+"
  LogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARNING, ERROR, FATAL]
    Default: INFO
    Description: Level of the logging of the lambda function.

  ConnectionStringOptions:
    Type: String
    AllowedPattern: "([^=,]+=[^=,]*(,[^=,]+=[^=,]*)*){0,1}"
    Description: Connection string options for the string. Comma separated list of key=value pairs

  # Snowflake Configuration
  SnowflakeAccount:
    Type: String
    Description: "The Snowflake account. Omit if not configuring a Snowflake repo."
  SnowflakeRole:
    Type: String
    Description: "The Snowflake role. Omit if not configuring a Snowflake repo."
  SnowflakeWarehouse:
    Type: String
    Description: "The Snowflake warehouse. Omit if not configuring a Snowflake repo."

  SnowflakeNGINXProxyAsgMax:
    Description: "The maximum number of hosts to create in the auto scaling group"
    Type: "String"
    Default: "2"
    AllowedPattern: "[0-9]+"
  SnowflakeNGINXProxyAsgMin:
    Description: "The minimum number of hosts to create in the auto autoscaling group"
    Type: "String"
    Default: "1"
    AllowedPattern: "[0-9]+"
  SnowflakeNGINXProxyAsgDesired:
    Description: "The desired number of hosts to create in the auto scaling group"
    Type: "String"
    Default: "1"
    AllowedPattern: "[0-9]+"
  SnowflakeNGINXProxySubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The subnets the EC2 instances will be deployed to. All subnets must be able to reach both the sidecar and the repository."
  SnowflakeNGINXProxySSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances.
    Default: AWS_Key
  SnowflakeNGINXProxyInstanceType:
    AllowedValues:
      [t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, m5.large, m5.xlarge, c5.large, c5.xlarge, r5.large, r5.xlarge]
    Default: t3.medium
    Description: Amazon EC2 instance type for the EC2 instances
    Type: String
  SnowflakeNGINXProxyInstanceSecurityGroup:
    Description: "List of Security Group IDs"
    Type: List<AWS::EC2::SecurityGroup::Id>
  SnowflakeNGINXProxyLoadBalancerScheme:
    Description: "EC2 network load balancer scheme ('internal' or 'internet-facing')"
    Type: String
    AllowedValues: ['internal', 'internet-facing']
    Default: 'internal'
    ConstraintDescription: must specify 'internal' or 'internet-facing'.
  SnowflakeNGINXProxyEnableCrossZoneLoadBalancing:
    Type: String
    Description: If the load balancer for the snowflake NGINX proxy should have cross zone load balancing.
    AllowedValues: ["true", "false"]
  SnowflakeNGINXProxyAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: "Amazon Linux 2 AMI ID for sidecar EC2 instances. The default behavior is to use the latest version.
      In order to define a new image, replace 'recommended' by the desired image name (eg 'amzn2-ami-ecs-hvm-2.0.20181112-x86_64-ebs')."
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SidecarNamePrefix:
    Type: String
    Description: "Name prefix of the sidecar. This parameter is used to identify the elements of this stack and also the events created during runtime."

  # Lambda DNS and networking configuration
  HostedZoneID:
    Type: AWS::Route53::HostedZone::Id
    Description: "Hosted zone where the failover record sets will be created."
  RecordSetName:
    Type: String
    Description: "Name of the record sets that will reference the repository and sidecar."
  RepoRecordSetType:
    Type: String
    AllowedValues: [CNAME, A, AAAA]
    Default: CNAME
    Description: |
      Type of the record set for the repository informed in 'RepoHost'. If a domain name was provided, then
      choose 'CNAME', if IPv4 choose 'A' and if IPv6 choose 'AAAA'.
  TTL:
    Type: String
    AllowedPattern: "\\d+"
    Default: "60"
    Description: "Time-to-live for the record set."
  ConsecutiveFailuresForTrigger:
    Type: String
    Description: "Number of consecutive failures that will trigger the alarm state that will perform the fail open"
    Default: "2"
  ScheduleExpression:
    Description: "Schedule expression to invoke the health check. Default is rate(1 minute)."
    Type: String
    Default: "rate(1 minute)"
    AllowedPattern: '^cron\(([^ ]+ ){5}[^ ]+\)|rate\([^ ]+ [^ ]+\)$'

Conditions:
  CreateRepoSecret: !And
    - !Equals [!Ref RepoSecretArn, ""]
    - !Not [!Equals [!Ref RepoUsername, ""]]
    - !Not [!Equals [!Ref RepoPassword, ""]]
  UseDefaultCodeS3Bucket: !Equals [!Ref FailOpenCodeS3Bucket, ""]
  UseDefaultCodeS3Key: !Equals [!Ref FailOpenCodeS3Key, ""]
  IsSnowflakeRepository: !Equals [!Ref RepoType, "snowflake"]


Resources:
  RepoSecret:
    Condition: CreateRepoSecret
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: username and password for the repository
      Name: !Sub '/${AWS::StackName}/RepoSecret'
      SecretString: !Sub
        - '{"username":"${username}","password":"${password}"}'
        - username: !Join ['\\"', !Split ['"', !Ref RepoUsername]]
          password: !Join ['\\"', !Split ['"', !Ref RepoPassword]]
      Tags:
        - Key: 'Stack'
          Value: !Ref 'AWS::StackName'
  PrimaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Failover: PRIMARY
      HealthCheckId: !Ref Route53HealthCheck
      HostedZoneId: !Ref HostedZoneID
      ResourceRecords:
        - !Ref SidecarHost
      Name: !Ref RecordSetName
      TTL: !Ref TTL
      SetIdentifier: "sidecar"

  SecondaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: !Ref RepoRecordSetType
      Failover: SECONDARY
      HostedZoneId: !Ref HostedZoneID
      ResourceRecords:
        - !If [IsSnowflakeRepository, !GetAtt NLB.DNSName, !Ref RepoHost]
      Name: !Ref RecordSetName
      TTL: !Ref TTL
      SetIdentifier: "database"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !If [CreateRepoSecret, !Ref RepoSecret, !Ref RepoSecretArn]

              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !If [UseDefaultCodeS3Bucket, !Sub 'cyral-public-assets-${AWS::Region}', !Ref FailOpenCodeS3Bucket]
        # This is populated in at build time
        S3Key: !If [UseDefaultCodeS3Key, !Sub 'fail-open/${Version}/fail-open-lambda.zip', !Ref FailOpenCodeS3Key]
      Environment:
        Variables:
          FAIL_OPEN_SIDECAR_PORT: !Ref SidecarPort
          FAIL_OPEN_SIDECAR_HOST: !Ref SidecarHost
          FAIL_OPEN_CF_STACK_NAME: !Ref AWS::StackName
          FAIL_OPEN_REPO_TYPE: !Ref RepoType
          FAIL_OPEN_REPO_SECRET: !If [CreateRepoSecret, !Ref RepoSecret, !Ref RepoSecretArn]
          FAIL_OPEN_REPO_PORT: !Ref RepoPort
          FAIL_OPEN_REPO_DATABASE: !Ref RepoDatabase
          FAIL_OPEN_REPO_HOST: !Ref RepoHost
          FAIL_OPEN_N_RETRIES: !Sub "${NumberOfRetries}"
          FAIL_OPEN_LOG_LEVEL: !Ref LogLevel

          FAIL_OPEN_CONNECTION_STRING_OPTIONS: !Ref ConnectionStringOptions
          FAIL_OPEN_SNOWFLAKE_ACCOUNT: !Ref SnowflakeAccount
          FAIL_OPEN_SNOWFLAKE_ROLE: !Ref SnowflakeRole
          FAIL_OPEN_SNOWFLAKE_WAREHOUSE: !Ref SnowflakeWarehouse

          # adding oracle client path so that oracle client works
          LD_LIBRARY_PATH: 'oracle-client_21_4'

      FunctionName: !Ref AWS::StackName
      Timeout: "10"
      PackageType: Zip
      Runtime: go1.x
      Handler: failopen
      Role:
        !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref LambdaSubnets

  Events:
    Type: AWS::Events::Rule
    Properties:
      Description: Route53 Health Check
      Name: !Ref AWS::StackName
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: EVENTS
          Arn: !GetAtt LambdaFunction.Arn

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AWS::StackName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Events.Arn

  Route53CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alarm for Cyral Sidecar located at ${SidecarHost}, connecting to repo of ${RepoType} type"
      AlarmName: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
      MetricName: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName} (Health Check for resource ${SidecarHost})'
      Namespace: "CyralSidecarHealthChecks"
      ComparisonOperator: LessThanThreshold
      DatapointsToAlarm: !Ref ConsecutiveFailuresForTrigger
      EvaluationPeriods: !Ref ConsecutiveFailuresForTrigger
      Period: 60
      Statistic: "Minimum"
      Threshold: 1
      Dimensions:
        - Name: !Sub ${SidecarHost} ${RepoType} ${RepoHost} Health Check
          Value: !Sub ${SidecarHost} ${RepoType} ${RepoHost} Health Check
      TreatMissingData: "breaching"

  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        AlarmIdentifier:
          Name: !Sub '${SidecarHost}-${RepoType}-${RepoHost}: ${AWS::StackName}'
          Region: !Ref AWS::Region
        InsufficientDataHealthStatus: Unhealthy
        Type: CLOUDWATCH_METRIC
      HealthCheckTags:
        - Key: Name
          Value: !Ref AWS::StackName

  SnowflakeNGINXProxyLoadBalancerCertificate:
    Condition: IsSnowflakeRepository
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref RecordSetName
      DomainValidationOptions:
            - DomainName: !Ref RecordSetName
              HostedZoneId: !Ref HostedZoneID
      SubjectAlternativeNames: [!Ref SidecarHost]
      ValidationMethod: DNS
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"

  LaunchConfig:
    Condition: IsSnowflakeRepository
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref SnowflakeNGINXProxySSHKeyName
      ImageId: !Ref SnowflakeNGINXProxyAmiId
      SecurityGroups: !Ref SnowflakeNGINXProxyInstanceSecurityGroup
      InstanceType: !Ref SnowflakeNGINXProxyInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          wget https://openresty.org/package/amazon/openresty.repo -O /etc/yum.repos.d/openresty.repo
          yum check-update
          yum update -y
          yum install -y openresty
          #amazon-linux-extras enable nginx1
          #yum install -y nginx
          mkdir /usr/local/openresty/nginx/conf.d
          function gen_site_conf() {
            sudo bash -c "cat > /usr/local/openresty/nginx/conf.d/$1.conf" << EOF
            server {
                    root /var/www/html;
                    server_name $1;
                    location ~ (/session/v1/login-request|/session/authenticator-request) {
                        resolver 172.31.0.2 ipv6=off;
                        resolver_timeout 5s;
                        set \$snowflakecomputing "https://$2";
                        set \$repo_host "$2";
                        set \$sidecar_domain "$1";
                        access_by_lua_file src/login_access.lua;
                        proxy_pass \$snowflakecomputing;
                    }

                    location / {
                            if (\$is_browser = "1") {
                                add_header X-Deny-Reason "Redirecting to snowflake";
                                return 302 https://$2/;
                            }
                            proxy_pass https://$2/;
                    }

                    listen ${SidecarPort};
                    listen [::]:${SidecarPort};
            }
          EOF
          }
          function gen_bi_site_conf() {
            sudo bash -c "cat > /usr/local/openresty/nginx/conf.d/$1.conf" << EOF
            server {
                    root /var/www/html;
                    server_name $1;
                    location / {
                            proxy_pass https://$2/;
                    }
                    listen ${SidecarPort};
                    listen [::]:${SidecarPort};
            }
          EOF
          }

          # Create our lua directory
          mkdir /usr/local/openresty/nginx/src
          # Create the login lua file
          echo "`cat <<EOF
          if ngx.req.get_method() == \"POST\" then
              ngx.req.read_body()
              local data = ngx.req.get_body_data()

              local content_encoding = ngx.req.get_headers()[\"Content-Encoding\"]

              if content_encoding == \"gzip\" then
                  if data then
                      local zlib = require \"zlib\"
                      local stream = zlib.inflate()
                      data = stream(data);
                  end
              end

              local cjson = require \"cjson\"
              local json_data = cjson.decode(data)

              -- Rewrite account name in request.
              if (json_data.data.ACCOUNT_NAME)
              then
                  -- Get account name.
                  local account_name = \"\"
                  for part in string.gmatch(ngx.var.repo_host, \"[^%.]+\")
                  do
                      account_name = part
                      break
                  end

                  json_data.data.ACCOUNT_NAME = string.upper(account_name)

                  -- Set account name in request body.
                  ngx.req.clear_header(\"content-length\")
                  ngx.req.clear_header(\"content-encoding\")
                  ngx.req.set_body_data(cjson.encode(json_data))
              end

          end
          EOF`" > /usr/local/openresty/nginx/src/login_access.lua

          # Add new nginx map variable
          sed -i '/^http /a\    map \$http_user_agent \$is_browser {\n        default "0";\n        "~^Mozilla" "1";\n    }\n    include /usr/local/openresty/nginx/conf.d/*.conf;' /usr/local/openresty/nginx/conf/nginx.conf
          # Change the default nginx port on the default server to 8888 for healthchecks
          sed -i 's/80;/8888;/' /usr/local/openresty/nginx/conf/nginx.conf
          # Create the entry for sidecar domain
          gen_site_conf ${SidecarHost} ${RepoHost}
          systemctl enable openresty
          systemctl start openresty

  TargetGroupSidecarPort:
    Condition: IsSnowflakeRepository
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 8888
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: !Sub "${SidecarNamePrefix}-group"
      Port: !Ref SidecarPort
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  AutoScalingGroup:
    Condition: IsSnowflakeRepository
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ['-', [!Ref SidecarNamePrefix, snowflake,failopen,AutoScalingGroup]]
      Cooldown: 120
      DesiredCapacity:
        Ref: SnowflakeNGINXProxyAsgDesired
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize:
        Ref: SnowflakeNGINXProxyAsgMax
      MinSize:
        Ref: SnowflakeNGINXProxyAsgMin
      TargetGroupARNs:
        - !Ref TargetGroupSidecarPort
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref SidecarNamePrefix, snowflake, failopen, ASG]]
          PropagateAtLaunch: 'true'
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        Ref: SnowflakeNGINXProxySubnets

  NLB:
    Condition: IsSnowflakeRepository
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', [!Ref AWS::StackName, lb]]
      Type: network
      Scheme: !Ref SnowflakeNGINXProxyLoadBalancerScheme
      Subnets: !Ref SnowflakeNGINXProxySubnets
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: !Ref SnowflakeNGINXProxyEnableCrossZoneLoadBalancing
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"

  NLBListenerSidecarPort:
    Condition: IsSnowflakeRepository
    DependsOn: SnowflakeNGINXProxyLoadBalancerCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      SslPolicy: ELBSecurityPolicy-2016-08
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupSidecarPort
      Certificates:
        - CertificateArn: !Ref SnowflakeNGINXProxyLoadBalancerCertificate
      LoadBalancerArn: !Ref NLB
      Port: !Ref SidecarPort
      Protocol: TLS
